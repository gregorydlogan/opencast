# migration-2 contains data migration steps
SET FOREIGN_KEY_CHECKS = 0;

####
# mh_assets_snapshot
##

# create IDs (PK); the archive table did not use surrogate IDs
SET @mh_assets_snapshot_id := 0;
UPDATE mh_assets_snapshot
SET id = @mh_assets_snapshot_id := @mh_assets_snapshot_id + 1;

# Now update the sequence generator for mh_assets_snapshot to a value
# greater than the last ID generated by the above statement.
# Otherwise duplicate key exceptions are most likely to happen when new episodes
# are being inserted by the AssetManager.
UPDATE SEQUENCE
SET SEQ_COUNT = @mh_assets_snapshot_id
WHERE SEQ_NAME = 'seq_mh_assets_snapshot';

# set series
UPDATE mh_assets_snapshot a
SET a.series_id = (SELECT substring(a.mediapackage_xml,
                                    locate('<series>', a.mediapackage_xml) + 8,
                                    locate('</series>', a.mediapackage_xml)
                                    - locate('<series>', a.mediapackage_xml) - 8));


####
# mh_assets_asset
##

# link with mh_assets_snapshot: create foreign keys
UPDATE mh_assets_asset a
SET a.snapshot_id = (SELECT id
                    FROM mh_assets_snapshot
                    WHERE a.mediapackage = mediapackage_id AND a.version = version);

# rewrite IDs starting with 1
SET @mh_assets_asset_id = (SELECT min(id) - 1
                           FROM mh_assets_asset);
UPDATE mh_assets_asset a
SET a.id = a.id - @mh_assets_asset_id;

# update the sequence generator
INSERT INTO SEQUENCE
(SEQ_COUNT, SEQ_NAME)
VALUES ((SELECT max(id) + 1
         FROM mh_assets_asset), 'seq_mh_assets_asset');
INSERT INTO SEQUENCE
(SEQ_COUNT, SEQ_NAME)
VALUES ((SELECT max(id) + 1
         FROM mh_assets_snapshot), 'seq_mh_assets_snapshot');
####
# mh_assets_version_claim
##

SET FOREIGN_KEY_CHECKS = 1;
